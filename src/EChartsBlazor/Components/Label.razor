@inherits BaseItemComponent

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@code {
    private IDictionary<string, IDictionary<string, object>> rich = new Dictionary<string, IDictionary<string, object>>();

    /// <summary>
    /// 是否显示标签
    /// </summary>
    [Parameter]
    public bool? show { get; set; }

    /// <summary>
    /// 文本标签中数值的小数点精度
    /// </summary>
    [Parameter]
    public string? precision { get; set; }

    /// <summary>
    /// 距离图形元素的距离
    /// </summary>
    [Parameter]
    public int? distance { get; set; }

    /// <summary>
    /// 标签旋转。从 -90 度到 90 度。正值是逆时针
    /// </summary>
    [Parameter]
    public int? rotate { get; set; }

    /// <summary>
    /// 是否对文字进行偏移。默认不偏移
    /// </summary>
    /// 
    [Parameter]
    public int? offset { get; set; }

    /// <summary>
    /// 标签位置，可选：'start' 线的起始点。'middle' 线的中点。'end' 线的结束点
    /// </summary>
    [Parameter]
    public string? position { get; set; }

    /// <summary>
    /// 标签内容格式器，支持字符串模板和回调函数两种形式
    /// </summary>
    [Parameter]
    public string? formatter { get; set; }

    /// <summary>
    /// label 距离轴的距离
    /// </summary>
    [Parameter]
    public int? margin { get; set; }

    /// <summary>
    /// 文字的颜色
    /// </summary>
    [Parameter]
    public string? color { get; set; }

    /// <summary>
    /// 文字水平对齐方式，默认自动。可选：'left' 'center' 'right'
    /// </summary>
    [Parameter]
    public string? align { get; set; }

    /// <summary>
    /// 文字垂直对齐方式，默认自动。 可选：'top' 'middle' 'bottom'
    /// </summary>
    [Parameter]
    public string? verticalAlign { get; set; }

    /// <summary>
    /// 文字字体的粗细。可选：'normal''bold''bolder''lighter' 100 | 200 | 300 | 400...
    /// </summary>
    [Parameter]
    public string? fontWeight { get; set; }

    /// <summary>
    /// 文字字体的风格。可选：'normal' 'italic' 'oblique'
    /// </summary>
    [Parameter]
    public string? fontStyle { get; set; }

    /// <summary>
    /// 文字的字体系列
    /// </summary>
    [Parameter]
    public string? fontFamily { get; set; }

    /// <summary>
    /// 文字字体的风格。可选：'normal' 'italic' 'oblique'
    /// </summary>
    [Parameter]
    public int? fontSize { get; set; }

    /// <summary>
    /// 行高
    /// </summary>
    [Parameter]
    public int? lineHeight { get; set; }

    /// <summary>
    /// 文本显示宽度
    /// </summary>
    [Parameter]
    public int? width { get; set; }

    /// <summary>
    /// 文本显示高度
    /// </summary>
    [Parameter]
    public int? height { get; set; }

    /// <summary>
    /// 文字本身的描边颜色
    /// </summary>
    [Parameter]
    public string? textBorderColor { get; set; }

    /// <summary>
    /// 文字本身的描边宽度
    /// </summary>
    [Parameter]
    public int? textBorderWidth { get; set; }

    /// <summary>
    /// 文字本身的阴影颜色
    /// </summary>
    [Parameter]
    public string? textShadowColor { get; set; }

    /// <summary>
    /// 文字本身的阴影长度
    /// </summary>
    [Parameter]
    public int? textShadowBlur { get; set; }

    /// <summary>
    /// 文字本身的阴影 X 偏移
    /// </summary>
    [Parameter]
    public int? textShadowOffsetX { get; set; }

    /// <summary>
    /// 文字本身的阴影 Y 偏移
    /// </summary>
    [Parameter]
    public int? textShadowOffsetY { get; set; }

    /// <summary>
    /// 文字超出宽度是否截断或者换行
    /// </summary>
    [Parameter]
    public string? overflow { get; set; }

    /// <summary>
    /// 在overflow配置为'truncate'的时候，可以通过该属性配置末尾显示的文本
    /// </summary>
    [Parameter]
    public string? ellipsis { get; set; }

    /// <summary>
    /// 文本超出高度部分是否截断，配置height时有效
    /// </summary>
    [Parameter]
    public string? lineOverflow { get; set; }

    /// <summary>
    /// 文字块的内边距
    /// </summary>
    [Parameter]
    public dynamic? padding { get; set; }

    /// <summary>
    /// 文字块背景色
    /// </summary>
    [Parameter]
    public string? backgroundColor { get; set; }

    /// <summary>
    /// 文字块边框颜色
    /// </summary>
    [Parameter]
    public string? borderColor { get; set; }

    /// <summary>
    /// 文字块边框宽度
    /// </summary>
    [Parameter]
    public int? borderWidth { get; set; }

    /// <summary>
    /// 文字块边框描边类型。可选：'solid' 'dashed' 'dotted'
    /// </summary>
    [Parameter]
    public dynamic? borderType { get; set; }

    /// <summary>
    /// 用于设置虚线的偏移量
    /// </summary>
    [Parameter]
    public int? borderDashOffset { get; set; }

    /// <summary>
    /// 文字块的圆角
    /// </summary>
    [Parameter]
    public dynamic? borderRadius { get; set; }

    /// <summary>
    /// 文字块的背景阴影长度
    /// </summary>
    [Parameter]
    public int? shadowBlur { get; set; }

    /// <summary>
    ///  文字块的背景阴影颜色
    /// </summary>
    [Parameter]
    public string? shadowColor { get; set; }

    /// <summary>
    /// 文字块的背景阴影 X 偏移
    /// </summary>
    [Parameter]
    public int? shadowOffsetX { get; set; }

    /// <summary>
    /// 文字块的背景阴影 Y 偏移
    /// </summary>
    [Parameter]
    public int? shadowOffsetY { get; set; }

    protected override IDictionary<string, object> LoadSetting()
    {
        IDictionary<string, object>? setting = null;

        if (Base is AxisPointer apcomponent)
        {
            apcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Series scomponent)
        {
            scomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Emphasis emcomponent)
        {
            emcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Blur blcomponent)
        {
            blcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Select slcomponent)
        {
            slcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Data dcomponent)
        {
            dcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Nodes ndcomponent)
        {
            ndcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is MarkPoint mpcomponent)
        {
            mpcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is MarkLine mlcomponent)
        {
            mlcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is MarkArea macomponent)
        {
            macomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Leaves lecomponent)
        {
            lecomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Categories cacomponent)
        {
            cacomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Links lkcomponent)
        {
            lkcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Levels lvcomponent)
        {
            lvcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Geo geocomponent)
        {
            geocomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Regions regcomponent)
        {
            regcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Timeline tlcomponent)
        {
            tlcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }
        else if (Base is Progress prcomponent)
        {
            prcomponent.SetLabel((label) =>
            {
                setting = label;
            });
        }

        return setting ?? new Dictionary<string, object>();
    }

    public override void SetSetting(IDictionary<string, object> setting)
    {
        if (show.HasValue)
            FillSetting("show", show.Value);

        if (!string.IsNullOrEmpty(precision))
            FillSetting("precision", precision);

        if (distance.HasValue)
            FillSetting("distance", distance.Value);

        if (rotate.HasValue)
            FillSetting("rotate", rotate.Value);

        if (offset.HasValue)
            FillSetting("offset", offset.Value);

        if (!string.IsNullOrEmpty(position))
            FillSetting("position", position);

        if (!string.IsNullOrEmpty(formatter))
            FillSetting("formatter", formatter);

        if (margin.HasValue)
            FillSetting("margin", margin.Value);

        if (!string.IsNullOrEmpty(color))
            FillSetting("color", color);

        if (!string.IsNullOrEmpty(align))
            FillSetting("align", align);

        if (!string.IsNullOrEmpty(verticalAlign))
            FillSetting("verticalAlign", verticalAlign);

        if (!string.IsNullOrEmpty(fontStyle))
            FillSetting("fontStyle", fontStyle);

        if (!string.IsNullOrEmpty(fontWeight))
            FillSetting("fontWeight", fontWeight);

        if (!string.IsNullOrEmpty(fontFamily))
            FillSetting("fontFamily", fontFamily);

        if (fontSize.HasValue)
            FillSetting("fontSize", fontSize.Value);

        if (lineHeight.HasValue)
            FillSetting("lineHeight", lineHeight.Value);

        if (width.HasValue)
            FillSetting("width", width.Value);

        if (height.HasValue)
            FillSetting("height", height.Value);

        if (!string.IsNullOrEmpty(textBorderColor))
            FillSetting("textBorderColor", textBorderColor);

        if (textBorderWidth.HasValue)
            FillSetting("textBorderWidth", textBorderWidth.Value);

        if (!string.IsNullOrEmpty(textShadowColor))
            FillSetting("textShadowColor", textShadowColor);

        if (textShadowBlur.HasValue)
            FillSetting("textShadowBlur", textShadowBlur.Value);

        if (textShadowOffsetX.HasValue)
            FillSetting("textShadowOffsetX", textShadowOffsetX.Value);

        if (textShadowOffsetY.HasValue)
            FillSetting("textShadowOffsetY", textShadowOffsetY.Value);

        if (!string.IsNullOrEmpty(overflow))
            FillSetting("overflow", overflow);

        if (!string.IsNullOrEmpty(ellipsis))
            FillSetting("ellipsis", ellipsis);

        if (!string.IsNullOrEmpty(lineOverflow))
            FillSetting("lineOverflow", lineOverflow);

        if (padding != null)
            FillSetting("padding", padding);

        if (!string.IsNullOrEmpty(backgroundColor))
            FillSetting("backgroundColor", backgroundColor);

        if (!string.IsNullOrEmpty(borderColor))
            FillSetting("borderColor", borderColor);

        if (borderWidth.HasValue)
            FillSetting("borderWidth", borderWidth.Value);

        if (borderType != null)
            FillSetting("borderType", borderType);

        if (borderDashOffset.HasValue)
            FillSetting("borderDashOffset", borderDashOffset.Value);

        if (borderRadius != null)
            FillSetting("borderRadius", borderRadius);

        if (shadowBlur.HasValue)
            FillSetting("shadowBlur", shadowBlur.Value);

        if (!string.IsNullOrEmpty(shadowColor))
            FillSetting("shadowColor", shadowColor);

        if (shadowOffsetX.HasValue)
            FillSetting("shadowOffsetX", shadowOffsetX.Value);

        if (shadowOffsetY.HasValue)
            FillSetting("shadowOffsetY", shadowOffsetY.Value);
    }

    public void SetRich(Action<IDictionary<string, IDictionary<string, object>>> action)
    {
        FillSetting("rich", rich);
        action?.Invoke(rich);
    }
}
